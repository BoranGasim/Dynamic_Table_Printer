CREATE OR REPLACE PROCEDURE prc_method4(p_table_name IN VARCHAR2,
                                        p_where_clause IN VARCHAR2 DEFAULT NULL) IS
    TYPE t_columns IS TABLE OF user_tab_columns%ROWTYPE INDEX BY PLS_INTEGER;
    v_columns             t_columns;
    v_columns_with_commas VARCHAR2(32767);
    v_number_value        NUMBER;
    v_string_value        VARCHAR2(32767);
    v_date_value          DATE;
    v_output_string       VARCHAR2(32767);
    cur_dynamic           INTEGER;
    v_sql                 VARCHAR2(32767);

    -- Local functions for datatype checking
    FUNCTION is_number(p_datatype VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN p_datatype = 'NUMBER';
    END;

    FUNCTION is_varchar(p_datatype VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN p_datatype IN ('VARCHAR2', 'VARCHAR', 'CHAR');
    END;

    FUNCTION is_date(p_datatype VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN p_datatype = 'DATE';
    END;

BEGIN
    SELECT * BULK COLLECT INTO v_columns
    FROM user_tab_columns
    WHERE table_name = UPPER(p_table_name);

    v_columns_with_commas := v_columns(1).column_name;
    FOR i IN 2 .. v_columns.COUNT LOOP
        v_columns_with_commas := v_columns_with_commas || ',' || v_columns(i).column_name;
    END LOOP;

     -- Build dynamic SQL with optional WHERE clause
    v_sql := 'SELECT ' || v_columns_with_commas || ' FROM ' || p_table_name;
    IF p_where_clause IS NOT NULL THEN
        v_sql := v_sql || ' WHERE ' || p_where_clause;
    END IF;

    cur_dynamic := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(cur_dynamic,v_sql, DBMS_SQL.NATIVE);

    FOR idx IN 1 .. v_columns.COUNT LOOP
        IF is_number(v_columns(idx).data_type) THEN
            DBMS_SQL.DEFINE_COLUMN(cur_dynamic, idx, 1);
        ELSIF is_varchar(v_columns(idx).data_type) THEN
            DBMS_SQL.DEFINE_COLUMN(cur_dynamic, idx, 'dummy text', v_columns(idx).char_length);
        ELSIF is_date(v_columns(idx).data_type) THEN
            DBMS_SQL.DEFINE_COLUMN(cur_dynamic, idx, SYSDATE);
        END IF;

        v_output_string := v_output_string || ' ' || RPAD(v_columns(idx).column_name, 20);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(v_output_string);
    v_number_value := DBMS_SQL.EXECUTE(cur_dynamic);

    WHILE DBMS_SQL.FETCH_ROWS(cur_dynamic) > 0 LOOP
        v_output_string := NULL;

        FOR t IN 1 .. v_columns.COUNT LOOP
            IF is_number(v_columns(t).data_type) THEN
                DBMS_SQL.COLUMN_VALUE(cur_dynamic, t, v_number_value);
                v_output_string := v_output_string || ' ' || RPAD(NVL(TO_CHAR(v_number_value), ' '), 20);

            ELSIF is_varchar(v_columns(t).data_type) THEN
                DBMS_SQL.COLUMN_VALUE(cur_dynamic, t, v_string_value);
                v_output_string := v_output_string || ' ' || RPAD(NVL(TO_CHAR(v_string_value), ' '), 20);

            ELSIF is_date(v_columns(t).data_type) THEN
                DBMS_SQL.COLUMN_VALUE(cur_dynamic, t, v_date_value);
                v_output_string := v_output_string || ' ' || RPAD(NVL(TO_CHAR(v_date_value), ' '), 20);
            END IF;
        END LOOP;

        DBMS_OUTPUT.PUT_LINE(v_output_string);
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR(cur_dynamic);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        IF DBMS_SQL.IS_OPEN(cur_dynamic) THEN
            DBMS_SQL.CLOSE_CURSOR(cur_dynamic);
        END IF;
END;
/